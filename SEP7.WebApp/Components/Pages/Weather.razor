@page "/weather"
@using ChartJs.Blazor
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@inject HttpClient Http

<PageTitle>Totals Overview</PageTitle>

<h3>Totals Overview</h3>

<div>
    <h4>Pie Chart</h4>
    <ChartJsPieChart Config="@PieChartConfig" />
</div>

@if (selectedField != null)
{
    <div class="mt-4">
        <h5>Details for @selectedField</h5>
        <p>Value: @selectedValue</p>
    </div>
}

@code {
    private PieConfig PieChartConfig = new PieConfig();
    private string? selectedField;
    private double selectedValue;

    private class MaterialTotal
    {
        public int MaterialId { get; set; }
        public string MaterialName { get; set; } = string.Empty;
        public double ADP_Fossil_MJ { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch data from your API
            var totals = await Http.GetFromJsonAsync<List<MaterialTotal>>("api/totals");

            if (totals != null)
            {
                // Create a new dataset
                var dataset = new PieDataset<double>
                {
                    BackgroundColor = new IndexableOption<string>(totals.Select(_ => $"#{RandomColor()}").ToArray()),
                    BorderColor = new IndexableOption<string>(totals.Select(_ => "rgba(255, 255, 255, 1)").ToArray()),
                    HoverBackgroundColor = new IndexableOption<string>(totals.Select(_ => "rgba(0, 0, 0, 0.3)").ToArray()),
                    HoverBorderColor = new IndexableOption<string>(totals.Select(_ => "rgba(255, 255, 255, 1)").ToArray()),
                    BorderWidth = 2 // Border width in pixels
                };

                dataset.AddRange(totals.Select(t => t.ADP_Fossil_MJ)); // Add data values to the dataset

                // Configure PieChart
                PieChartConfig = new PieConfig
                {
                    Options = new PieOptions
                    {
                        Responsive = true,
                        OnClick = new JavaScriptHandler<ChartMouseEvent>("handlePieClick")
                    }
                };

                foreach (var label in totals.Select(t => t.MaterialName))
                {
                    PieChartConfig.Data.Labels.Add(label);
                }
                PieChartConfig.Data.Datasets.Add(dataset);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HandlePieClick(int index)
    {
        if (index >= 0 && index < ((PieDataset<double>)PieChartConfig.Data.Datasets.First()).Data.Count)
        {
            selectedField = PieChartConfig.Data.Labels[index];
            selectedValue = ((PieDataset<double>)PieChartConfig.Data.Datasets.First()).Data[index];
            StateHasChanged();
        }
    }

    private static string RandomColor()
    {
        var random = new Random();
        return $"{random.Next(0, 255):X2}{random.Next(0, 255):X2}{random.Next(0, 255):X2}";
    }
}