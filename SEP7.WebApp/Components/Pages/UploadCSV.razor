@page "/upload"
@inject HttpClient Http
@rendermode InteractiveServer

<div class="center-container">
    <div class="upload">
        <div class="upload-card">
            <!-- File upload section -->
            <div class="icon-section">
                <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" class="bi bi-cloud-upload-fill" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 0a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 4.095 0 5.555 0 7.318 0 9.366 1.708 11 3.781 11H7.5V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11h4.188C14.502 11 16 9.57 16 7.773c0-1.636-1.242-2.969-2.834-3.194C12.923 1.999 10.69 0 8 0m-.5 14.5V11h1v3.5a.5.5 0 0 1-1 0"/>
                </svg>
            </div>

            <div class="input-group">
                <label for="csvFile" class="input-label">
                    <svg xmlns="http://www.w3.org/2000/svg" width="55" height="45" fill="currentColor" class="bi bi-filetype-csv" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5zM3.517 14.841a1.13 1.13 0 0 0 .401.823q.195.162.478.252.284.091.665.091.507 0 .859-.158.354-.158.539-.44.187-.284.187-.656 0-.336-.134-.56a1 1 0 0 0-.375-.357 2 2 0 0 0-.566-.21l-.621-.144a1 1 0 0 1-.404-.176.37.37 0 0 1-.144-.299q0-.234.185-.384.188-.152.512-.152.214 0 .37.068a.6.6 0 0 1 .246.181.56.56 0 0 1 .12.258h.75a1.1 1.1 0 0 0-.2-.566 1.2 1.2 0 0 0-.5-.41 1.8 1.8 0 0 0-.78-.152q-.439 0-.776.15-.337.149-.527.421-.19.273-.19.639 0 .302.122.524.124.223.352.367.228.143.539.213l.618.144q.31.073.463.193a.39.39 0 0 1 .152.326.5.5 0 0 1-.085.29.56.56 0 0 1-.255.193q-.167.07-.413.07-.175 0-.32-.04a.8.8 0 0 1-.248-.115.58.58 0 0 1-.255-.384zM.806 13.693q0-.373.102-.633a.87.87 0 0 1 .302-.399.8.8 0 0 1 .475-.137q.225 0 .398.097a.7.7 0 0 1 .272.26.85.85 0 0 1 .12.381h.765v-.072a1.33 1.33 0 0 0-.466-.964 1.4 1.4 0 0 0-.489-.272 1.8 1.8 0 0 0-.606-.097q-.534 0-.911.223-.375.222-.572.632-.195.41-.196.979v.498q0 .568.193.976.197.407.572.626.375.217.914.217.439 0 .785-.164t.55-.454a1.27 1.27 0 0 0 .226-.674v-.076h-.764a.8.8 0 0 1-.118.363.7.7 0 0 1-.272.25.9.9 0 0 1-.401.087.85.85 0 0 1-.478-.132.83.83 0 0 1-.299-.392 1.7 1.7 0 0 1-.102-.627zm8.239 2.238h-.953l-1.338-3.999h.917l.896 3.138h.038l.888-3.138h.879z"/>
                    </svg>
                    Choose CSV File
                </label>
                <InputFile id="csvFile" OnChange="HandleCsvFileSelected" accept=".csv" class="file-input" />
            </div>

            <div class="input-group">
                <label for="imageFile" class="input-label">
                    <svg xmlns="http://www.w3.org/2000/svg" width="45" height="45" fill="currentColor" class="bi bi-card-image" viewBox="0 0 16 16">
                        <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
                        <path d="M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54L1 12.5v-9a.5.5 0 0 1 .5-.5z"/>
                    </svg>
                    Choose Image File
                </label>
                <InputFile id="imageFile" OnChange="HandleImageFileSelected" accept="image/*" class="file-input" />
            </div>

            <button @onclick="UploadFiles" class="btn btn-primary upload-btn">Upload</button>

            @if (isUploading)
            {
                <div class="upload-status text-info">Uploading...</div>
            }

            @if (!string.IsNullOrEmpty(uploadResult))
            {
                <div class="alert @alertClass" role="alert">
                    @uploadResult
                </div>
            }
            <div class="upload-card">
                <div class="form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" class="bi bi-cloud-download" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383"/>
                        <path fill-rule="evenodd" d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708z"/>
                    </svg>
                    <input type="text" id="productGroup" class="form-control" @bind="ProductGroup" placeholder="Enter product group (e.g. 4000)" />

                    @if (string.IsNullOrEmpty(CsvDownloadUrl))
                    {
                        <button @onclick="ExportCsv" class="btn btn-primary upload-btn">Export CSV</button>
                    }
                    else
                    {
                        <!-- Change to Download button once the URL is set -->
                        <a href="@CsvDownloadUrl" download class="btn btn-primary upload-btn">Download CSV</a>
                    }

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">@ErrorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IBrowserFile csvFile;
    private IBrowserFile imageFile;
    private bool isUploading = false;
    private string uploadResult = string.Empty;
    private string alertClass = "alert-success"; 
    private string ProductGroup { get; set; }
    private string CsvDownloadUrl { get; set; }
    private string ErrorMessage { get; set; }

    private void HandleCsvFileSelected(InputFileChangeEventArgs e)
    {
        csvFile = e.File;
        uploadResult = $"CSV file selected: {csvFile.Name} ({csvFile.Size} bytes)";
        alertClass = "alert-info";
    }

    private void HandleImageFileSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        uploadResult = $"Image file selected: {imageFile.Name} ({imageFile.Size} bytes)";
        alertClass = "alert-info";
    }

    private async Task UploadFiles()
    {
        if (csvFile == null || imageFile == null)
        {
            uploadResult = "Both CSV and Image files are required.";
            alertClass = "alert-danger";
            return;
        }

        isUploading = true;
        uploadResult = $"Uploading {csvFile.Name} and {imageFile.Name}...";
        alertClass = "alert-info";

        var content = new MultipartFormDataContent();

        // Add CSV file content
        var csvStreamContent = new StreamContent(csvFile.OpenReadStream());
        csvStreamContent.Headers.Add("Content-Type", "text/csv");
        content.Add(csvStreamContent, "file", csvFile.Name);

        // Add Image file content
        var imageStreamContent = new StreamContent(imageFile.OpenReadStream());
        imageStreamContent.Headers.Add("Content-Type", imageFile.ContentType);
        content.Add(imageStreamContent, "imageFile", imageFile.Name);

        try
        {
            var response = await Http.PostAsync("https://localhost:7073/api/Import/upload", content);

            if (response.IsSuccessStatusCode)
            {
                uploadResult = "Files uploaded and processed successfully!";
                alertClass = "alert-success";
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                uploadResult = $"Error uploading files: {errorMessage}";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            uploadResult = $"Error uploading files: {ex.Message}";
            alertClass = "alert-danger";
            Console.WriteLine($"Error uploading files: {ex.Message}");
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task ExportCsv()
    {
        if (string.IsNullOrEmpty(ProductGroup))
        {
            ErrorMessage = "Please enter a product group.";
            CsvDownloadUrl = null;
            return;
        }

        try
        {
            CsvDownloadUrl = $"https://localhost:7073/api/Import/export-totals-and-variance?productGroup={ProductGroup}";

            var response = await Http.GetAsync(CsvDownloadUrl);

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Invalid product group. No data found for this group.";
                CsvDownloadUrl = null;
            }
            else
            {
                ErrorMessage = null;
            }
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = "An error occurred while processing your request: " + ex.Message;
            CsvDownloadUrl = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
            CsvDownloadUrl = null;
        }
    }
}
