@page "/"
@inject HttpClient Http
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<h3 class="text-center">Products</h3>

<div class="product-container">
    @if (isLoading)
    {
        <p>Loading products...</p>
    }
    else if (products == null || products.Count == 0)
    {
        <p>No products available.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="product-card">
                <img src="@GetProductImage(product)" alt="@product.ProductName" class="product-image" />
                <div class="product-details">
                    <h4>@product.ProductName</h4>
                    <button class="btn btn-primary" @onclick="() => NavigateToProductDetails(product.ProductID)">
                        View Details
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Product> products = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch products from the API
            var response = await Http.GetFromJsonAsync<List<Product>>("https://localhost:7073/api/Product");
            if (response != null)
            {
                products = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Placeholder function to get product image URL
    private string GetProductImage(Product product)
    {
        // Replace with logic to fetch product-specific image URLs
        return "https://via.placeholder.com/150"; // Default placeholder image
    }

    private void NavigateToProductDetails(string productId)
    {
        // Redirect user to the product details page with the ProductID as a query parameter
        NavigationManager.NavigateTo($"/product-materials?productId={productId}");
    }

    // Product model (ensure this matches your backend structure)
    private class Product
    {
        public string ProductID { get; set; }
        public string ProductName { get; set; }
        public string ImageUrl { get; set; } // Add ImageUrl if your API provides it
    }
}
