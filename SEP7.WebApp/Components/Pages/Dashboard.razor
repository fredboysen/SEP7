@page "/dashboard"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http


<div class="dashboard-container">
    <h3 class="dashboard-title">GWP Total by Product</h3>
    <div class="top-section">
        <div class="line-chart-container">
        <RadzenChart class="unique-pie-chart">
            <RadzenPieSeries Data="pieChartData" ValueProperty="Value" CategoryProperty="Category" Title="GWP Total by Product" />
        </RadzenChart>
    </div>
        <div class="line-chart-container"> 
        <RadzenChart class="unique-column-chart">
            <RadzenColumnSeries Data="barChartData" ValueProperty="GWP_Total_kg_CO2" CategoryProperty="ProductName" Fill="Blue" Title="GWP Total Kg/CO2" />
        </RadzenChart>
    </div>
</div>
<h3 class="dashboard-title">VOLA HQ Usage Overview</h3>

    <div class="bottom-section">
    <div class="line-chart-container">
        <RadzenChart class="unique-line-chart">
            <RadzenLineSeries Data="lineChartData" ValueProperty="Value" CategoryProperty="Category" Stroke="blue" Title="Total Energy Consumption (kWh) Over Years VOLA HQ" />
        </RadzenChart>
    </div>
    
    <div class="energy-usage-container">
        <div class="energy-usage-section">
            <RadzenChart class="energy-usage-bar-chart">
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Electricity" CategoryProperty="Year" Title="Electricity" Fill="Blue"  />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="DistrictHeating" CategoryProperty="Year" Title="District Heating" Fill="Green" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="NaturalGas" CategoryProperty="Year" Title="Natural Gas" Fill="Red" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Propane" CategoryProperty="Year" Title="Propane" Fill="Orange" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Hydrogen" CategoryProperty="Year" Title="Hydrogen" Fill="Purple" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Oil" CategoryProperty="Year" Title="Oil" Fill="Yellow" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Petrol" CategoryProperty="Year" Title="Petrol" Fill="Brown" />
                <RadzenColumnSeries Data="hqUsageDataYear" ValueProperty="Diesel" CategoryProperty="Year" Title="Diesel" Fill="Gray" />
            </RadzenChart>
        </div>
    </div>
</div>
</div>

@code {
    private List<ChartData> pieChartData = new();
    private List<BarChartData> barChartData = new();
    private List<ChartData> lineChartData = new();
    private List<BarChartDataByYear> hqUsageDataYear = new();

    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            var hqUsageData = await Http.GetFromJsonAsync<List<HQUsage>>("https://localhost:7073/api/HQ_Usage", _cts.Token);
            var products = await Http.GetFromJsonAsync<List<Product>>("http://localhost:5123/api/Totals/GetTotals", _cts.Token);

            if (hqUsageData != null && products != null)
            {
                pieChartData = TransformPieChartData(products);
                barChartData = TransformBarChartData(products);
                lineChartData = TransformLineChartData(hqUsageData);
                hqUsageDataYear = TransformEnergyUsageData(hqUsageData);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (TaskCanceledException)
        {
            Console.WriteLine("Task was canceled due to component disposal.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private List<ChartData> TransformPieChartData(List<Product> products)
    {
        
        return products.Select(product => new ChartData
        {
            Category = product.product.productName, 
            Value = product.gwP_Total_kg_CO2 
        }).ToList();
    }

    private List<BarChartData> TransformBarChartData(List<Product> products)
    {
        
        return products.Select(product => new BarChartData
        {
            ProductName = product.product.productName, 
            GWP_Total_kg_CO2 = product.gwP_Total_kg_CO2 
        }).ToList();
    }

    private List<ChartData> TransformLineChartData(List<HQUsage> hqUsageData)
    {
        return hqUsageData
            .GroupBy(x => x.Year)
            .Select(group => new ChartData
            {
                Category = group.Key,
                Value = group.Sum(x => x.EnergyConsumption)
            })
            .OrderBy(data => data.Category)
            .ToList();
    }

    private List<BarChartDataByYear> TransformEnergyUsageData(List<HQUsage> hqUsageData)
    {
        return hqUsageData
            .GroupBy(x => x.Year)
            .Select(group => new BarChartDataByYear
            {
                Year = group.Key,
                Electricity = group.Sum(x => x.Electricity),
                DistrictHeating = group.Sum(x => x.DistrictHeating),
                NaturalGas = group.Sum(x => x.NaturalGas),
                Propane = group.Sum(x => x.Propane),
                Hydrogen = group.Sum(x => x.Hydrogen),
                Oil = group.Sum(x => x.Oil),
                Petrol = group.Sum(x => x.Petrol),
                Diesel = group.Sum(x => x.Diesel)
            })
            .OrderBy(data => data.Year)
            .ToList();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    private class ChartData
    {
        public string Category { get; set; }
        public double Value { get; set; }
    }

    private class BarChartData
    {
        public string ProductName { get; set; }
        public double GWP_Total_kg_CO2 { get; set; }
    }

    private class BarChartDataByYear
    {
        public string Year { get; set; }
        public double Electricity { get; set; }
        public double DistrictHeating { get; set; }
        public double NaturalGas { get; set; }
        public double Propane { get; set; }
        public double Hydrogen { get; set; }
        public double Oil { get; set; }
        public double Petrol { get; set; }
        public double Diesel { get; set; }
    }

    private class HQUsage
    {
        public string Year { get; set; }
        public int EnergyConsumption { get; set; }

        public double Electricity { get; set; }
        public double DistrictHeating { get; set; }
        public double NaturalGas { get; set; }
        public double Propane { get; set; }
        public double Hydrogen { get; set; }
        public double Oil { get; set; }
        public double Petrol { get; set; }
        public double Diesel { get; set; }
    }

    private class Product
    {
        public string productID { get; set; }
        public double gwP_Total_kg_CO2 { get; set; }
        public ProductDetails product { get; set; }
    }

    private class ProductDetails
    {
        public string productName { get; set; }
        public string imageUrl { get; set; }
    }
}
